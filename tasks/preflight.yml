---

- name: Fail when variables are not defined
  fail:
    msg: "The {{ item }} property must be set"
  when: ( item is not defined )
  with_items:
    - couchbase_host
    - couchbase_username
    - couchbase_password
    - cmos_exporter_bind_address
    - cmos_exporter_bind_port
    - cmos_exporter_fake_collections

- name: Fail when variables do not have a length
  fail:
    msg: "The {{ item }} property must be valued"
  when: ( item | string | length == 0 )
  with_items:
    - couchbase_host
    - couchbase_username
    - couchbase_password
    - cmos_exporter_bind_address
    - cmos_exporter_bind_port
    - cmos_exporter_fake_collections

- name: Fail when cmos_exporter_fake_collections is a string and not a boolean
  fail:
    msg: "The cmos_exporter_fake_collections property must be boolean"
  when: ( cmos_exporter_fake_collections is defined and cmos_exporter_fake_collections is string )

- name: Fail when cmos_exporter_bind_port is not a number
  fail:
    msg: "The cmos_exporter_bind_port property must be an integer"
  when: ( cmos_exporter_bind_port is defined and cmos_exporter_fake_collections is not number )

- name: Fail when the log level contains an invalid value
  fail:
    msg: "The cmos_exporter_log_level can only be: debug, info, warn, error"
  when: ( cmos_exporter_log_level not in ['debug','info','warn','error'] )

- name: Assert usage of systemd as an init system
  assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This role only works with systemd"

- name: Get systemd version
  command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version
  tags:
    - skip_ansible_lint

- name: Set systemd version fact
  set_fact:
    cmos_exporter_systemd_version: "{{ __systemd_version.stdout_lines[0] | regex_replace('^systemd\\s(\\d+).*$', '\\1') }}"

- name: Get Cluster Info and Version
  block:
    - name: Get the Couchbase Cluster Info
      no_log: true
      uri:
        url: http://localhost:8091/pools/default
        method: GET
        user: "{{ couchbase_username }}"
        password: "{{ couchbase_password }}"
        timeout: 2
      register: _results

    - name: Set the Couchbase Server Version from the result of API call
      set_fact:
        couchbase_server_version: "{{ _results.json | community.general.json_query('nodes[?thisNode].version | [0]') }}"

    - name: Couchbase Server Version
      debug:
        msg: "{{ couchbase_server_version }}"

    - name: Fail when the installed version of Couchbase is 7.x or greater
      fail:
        msg: >
          The CMOS Couchbase Exporter does not need to be installed when using Couchbase 7.x+ metrics are natively exposed through a /metrics endpoint.
          See: https://docs.couchbase.com/server/current/manage/monitor/set-up-prometheus-for-monitoring.html
      when: couchbase_server_version is version('7.0.0', '>=')

- name: Check if cmos-exporter is installed
  stat:
    path: "{{ cmos_exporter_install_dir }}/{{ cmos_exporter_binary }}"
  register: __cmos_exporter_is_installed
  check_mode: false

- name: Install Checks
  block:
    - name: Gather currently installed cmos version
      command:
        cmd: |
          {{ cmos_exporter_install_dir }}/{{ cmos_exporter_binary }} --version
      changed_when: false
      register: __cmos_exporter_current_version_output
      check_mode: false

    - name: Set CMOS Installed Version
      set_fact:
        cmos_exporter_installed_version: "{{ __cmos_exporter_current_version_output.stdout.split(' ')[2] }}"

    - name: CMOS Installed Version
      debug:
        var: cmos_exporter_installed_version
  when: __cmos_exporter_is_installed.stat.exists

- name: Get CMOS Exporter Version from Github
  block:
    - name: Get the latest published CMOS Exporter
      # this will need to be changed from /releases to /releases/latest once a GA release has been made
      shell: | # noqa command-instead-of-module
        curl -s https://api.github.com/repos/{{ _cmos_exporter_github_org }}/{{ _cmos_exporter_github_repo }}/releases \
          | grep -m 1 tag_name \
          | cut -d '"' -f 4 | cut -c 2-
      register: _cmos_exporter_version_request

    - name: Set the CMOS Exporter Version
      set_fact:
        cmos_exporter_version: "{{ _cmos_exporter_version_request.stdout | string }}"

  when: cmos_exporter_version == 'latest'

- name: Set the CMOS Exporter Download URL
  set_fact:
    cmos_exporter_download_url: "https://github.com/{{ _cmos_exporter_github_org }}/{{ _cmos_exporter_github_repo }}/releases/download/v{{ cmos_exporter_version }}/cmos-exporter-linux-amd64"

- name: CMOS Exporter Version
  debug:
    var: cmos_exporter_version
  tags:
    - cmos_exporter_install

- name: CMOS Exporter Download URL
  debug:
    msg: "{{ cmos_exporter_download_url }}"

- name: Set whether or not to do the install
  set_fact:
    __cmos_exporter_do_install: "{{  not __cmos_exporter_is_installed.stat.exists or cmos_exporter_installed_version is version_compare(cmos_exporter_version, '<') }}"

- name: Do Install
  debug:
    var: __cmos_exporter_do_install
